import React, { useState, useEffect, useRef } from "react";
import jsPDF from "jspdf";

export default function ViewProject({ project, setShow }) {
  const [activeSection, setActiveSection] = useState(0);
  const containerRef = useRef(null);
  const isScrollingRef = useRef(false);

  const handleDownloadPDF = () => {
  const doc = new jsPDF();
  const pageHeight = doc.internal.pageSize.height;
  const pageWidth = doc.internal.pageSize.width;
  const margin = 20;
  const footerHeight = 20;
  const maxTextWidth = pageWidth - margin * 2;

  let fontSize = 50;
  doc.setFont("helvetica", "bold");

  const getWrappedLines = (text, size) => {
    doc.setFontSize(size);
    return doc.splitTextToSize(text, maxTextWidth);
  };

  // --- Title page ---
  let titleLines = getWrappedLines(project.title, fontSize);
  while (titleLines.length > 3 && fontSize > 20) {
    fontSize -= 2;
    titleLines = getWrappedLines(project.title, fontSize);
  }

  const lineHeight = fontSize * 1.2;
  const textHeight = titleLines.length * lineHeight;
  const startY = (pageHeight - footerHeight - textHeight) / 2;

  doc.setFontSize(fontSize);
  titleLines.forEach((line, i) => {
    doc.text(line, pageWidth / 2, startY + i * lineHeight, { align: "center" });
  });

  doc.addPage();

  // --- Content pages ---
  let y = margin;

  project.sections.forEach((section) => {
    doc.setFontSize(16);
    doc.setFont("helvetica", "bold");
    const splitHeading = doc.splitTextToSize(section.heading, maxTextWidth);
    if (y + splitHeading.length * 7 > pageHeight - footerHeight - margin) {
      doc.addPage();
      y = margin;
    }
    doc.text(splitHeading, margin, y);
    y += splitHeading.length * 7 + 5;

    section.content.forEach((c) => {
      if (c.subheading) {
        doc.setFontSize(14);
        doc.setFont("helvetica", "bold");
        const splitSub = doc.splitTextToSize(c.subheading, maxTextWidth);
        if (y + splitSub.length * 7 > pageHeight - footerHeight - margin) {
          doc.addPage();
          y = margin;
        }
        doc.text(splitSub, margin, y);
        y += splitSub.length * 7 + 3;
      }

      doc.setFontSize(12);
      doc.setFont("helvetica", "normal");
      const splitText = doc.splitTextToSize(c.text, maxTextWidth);
      if (y + splitText.length * 7 > pageHeight - footerHeight - margin) {
        doc.addPage();
        y = margin;
      }
      doc.text(splitText, margin, y);
      y += splitText.length * 7 + 5;
    });

    y += 5;
  });

  // --- Header + Footer ---
  const totalPages = doc.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);

    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");

    // Top-right header
    const topRightText = "This SRS PDF is generated by SRSense";
    doc.text(topRightText, pageWidth - margin, margin / 2 + 2, { align: "right" });

    // Footer
    const footerY = pageHeight - footerHeight / 2;
    doc.text(project.title, margin, footerY);
    doc.text(`${i} of ${totalPages}`, pageWidth - margin, footerY, { align: "right" });
  }

  // --- Save ---
  doc.save(`${project.title}.pdf`);
};

  useEffect(() => {
    const container = containerRef.current;
    const handleScroll = () => {
      if (isScrollingRef.current) return;

      if (container.scrollTop + container.clientHeight >= container.scrollHeight - 1) {
        setActiveSection(project.sections.length - 1);
        return;
      }

      let closestIndex = 0;
      let minDistance = Infinity;
      project.sections.forEach((_, i) => {
        const el = document.getElementById(`section-${i}`);
        if (el) {
          const distance = Math.abs(
            el.getBoundingClientRect().top - container.getBoundingClientRect().top
          );
          if (distance < minDistance) {
            minDistance = distance;
            closestIndex = i;
          }
        }
      });
      setActiveSection(closestIndex);
    };

    container.addEventListener("scroll", handleScroll);
    return () => container.removeEventListener("scroll", handleScroll);
  }, [project.sections]);

  const scrollToSection = (i) => {
    const el = document.getElementById(`section-${i}`);
    if (el) {
      isScrollingRef.current = true;
      el.scrollIntoView({ behavior: "smooth", block: "start" });
      setActiveSection(i);
      setTimeout(() => {
        isScrollingRef.current = false;
      }, 500);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
      <div className="bg-white rounded-2xl shadow-lg max-w-4xl w-full max-h-[85vh] overflow-hidden flex relative">
        {/* Sidebar */}
        <aside className="w-1/4 bg-gray-300 border-r p-4 overflow-y-auto rounded-l-2xl flex flex-col justify-between">
          <div>
            <h2 className="text-xl font-bold text-gray-800 mb-4">{project.title}</h2>
            <ul className="space-y-2 text-sm">
              {project.sections.map((section, i) => (
                <li
                  key={i}
                  className={`cursor-pointer ${
                    activeSection === i
                      ? "text-gray-900 font-bold"
                      : "text-gray-600 hover:text-gray-900"
                  }`}
                  onClick={() => scrollToSection(i)}
                >
                  {section.heading}
                </li>
              ))}
            </ul>
          </div>

          <button
            onClick={handleDownloadPDF}
            className="mt-4 py-2 px-4 bg-red-600 text-white text-sm rounded hover:bg-red-700"
          >
            Download PDF
          </button>
        </aside>

        {/* Main content */}
        <main
          ref={containerRef}
          id="project-content"
          className="flex-1 p-6 overflow-y-auto scroll-smooth"
        >
          {/* Close button */}
          <button
            onClick={() => setShow(false)}
            className="absolute top-3 right-3 text-gray-500 hover:text-gray-800"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth={3}
              stroke="currentColor"
              className="w-8 h-8"
            >
              <path strokeLinecap="round" strokeLinejoin="round" d="M6 18 18 6M6 6l12 12" />
            </svg>
          </button>

          {project.sections.map((section, i) => (
            <div id={`section-${i}`} key={i} className="mb-6">
              <h3 className="text-lg font-semibold text-gray-700 mb-2">{section.heading}</h3>
              {section.content.map((c, j) => (
                <div key={j} className="mb-2">
                  {c.subheading && (
                    <p className="text-sm font-medium text-gray-600">{c.subheading}</p>
                  )}
                  <p className="text-sm text-gray-700">{c.text}</p>
                </div>
              ))}
            </div>
          ))}
        </main>
      </div>
    </div>
  );
}