import React, { useRef, useState } from "react";
import jsPDF from "jspdf";
import { useDispatch } from "react-redux";
import { deleteSrsById } from "../../../redux/features/deleteSrsSlice.js";
import { confirmAlert } from "react-confirm-alert";
import "react-confirm-alert/src/react-confirm-alert.css";
import Toast from "../../Toast.js";
import { fetchSrsHistory } from "../../../redux/features/GetHistory.js";

export default function ViewProject({ project, setShow, id }) {
  const dispatch = useDispatch();
  const sectionRefs = useRef([]);
  const [activeSection, setActiveSection] = useState(0);
  const [toast, setToast] = useState(null);

  const scrollToSection = (index) => {
    sectionRefs.current[index]?.scrollIntoView({ behavior: "smooth", block: "start" });
    setActiveSection(index);
  };

  const handleDownloadPDF = () => {
    const doc = new jsPDF();
    const pageHeight = doc.internal.pageSize.height;
    const pageWidth = doc.internal.pageSize.width;
    const margin = 20;
    const footerHeight = 20;
    const maxTextWidth = pageWidth - margin * 2;

    let fontSize = 50;
    doc.setFont("helvetica", "bold");

    const getWrappedLines = (text, size) => {
      doc.setFontSize(size);
      return doc.splitTextToSize(text, maxTextWidth);
    };

    let titleLines = getWrappedLines(project.title, fontSize);
    while (titleLines.length > 3 && fontSize > 20) {
      fontSize -= 2;
      titleLines = getWrappedLines(project.title, fontSize);
    }

    const lineHeight = fontSize * 1.2;
    const textHeight = titleLines.length * lineHeight;
    const startY = (pageHeight - footerHeight - textHeight) / 2;

    doc.setFontSize(fontSize);
    titleLines.forEach((line, i) => {
      doc.text(line, pageWidth / 2, startY + i * lineHeight, { align: "center" });
    });

    doc.addPage();

    let y = margin;
    project.sections?.forEach((section) => {
      doc.setFontSize(16);
      doc.setFont("helvetica", "bold");
      const splitHeading = doc.splitTextToSize(section.heading, maxTextWidth);
      if (y + splitHeading.length * 7 > pageHeight - footerHeight - margin) {
        doc.addPage();
        y = margin;
      }
      doc.text(splitHeading, margin, y);
      y += splitHeading.length * 7 + 5;

      section.content?.forEach((c) => {
        if (c.subheading) {
          doc.setFontSize(14);
          doc.setFont("helvetica", "bold");
          const splitSub = doc.splitTextToSize(c.subheading, maxTextWidth);
          if (y + splitSub.length * 7 > pageHeight - footerHeight - margin) {
            doc.addPage();
            y = margin;
          }
          doc.text(splitSub, margin, y);
          y += splitSub.length * 7 + 3;
        }

        doc.setFontSize(12);
        doc.setFont("helvetica", "normal");
        const splitText = doc.splitTextToSize(c.text, maxTextWidth);
        if (y + splitText.length * 7 > pageHeight - footerHeight - margin) {
          doc.addPage();
          y = margin;
        }
        doc.text(splitText, margin, y);
        y += splitText.length * 7 + 5;
      });

      y += 5;
    });

    const totalPages = doc.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      const topRightText = "This SRS PDF is generated by SRSense";
      doc.text(topRightText, pageWidth - margin, margin / 2 + 2, { align: "right" });

      const footerY = pageHeight - footerHeight / 2;
      doc.text(project.title, margin, footerY);
      doc.text(`${i} of ${totalPages}`, pageWidth - margin, footerY, { align: "right" });
    }

    doc.save(`${project.title || "SRS"}.pdf`);
  };
  console.log("id :", id)

  const handleDelete = () => {
    confirmAlert({
      title: "Confirm Deletion",
      message: "Are you sure you want to delete this SRS document?",
      buttons: [
        {
          label: "Yes, Delete",
          onClick: () => {
            dispatch(deleteSrsById(project.id || id))
              .unwrap()
              .then(() => {
                setToast({ message: "Deleted successfully!", type: "success" });
                setShow(false);
              })
              .catch((err) => {
                const msg = typeof err === "string" ? err : err?.message || JSON.stringify(err);
                setToast({ message: msg || "Failed to delete!", type: "error" });
              });
            dispatch(fetchSrsHistory());
          },
        },
        { label: "Cancel" },
      ],
    });
  };

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-70 z-50">
      {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}

      <div className="relative w-4/5 h-4/5 bg-white rounded-2xl shadow-lg flex overflow-hidden">
        <button onClick={() => setShow(false)} className="absolute top-3 right-4 text-black font-bold text-2xl">âœ•</button>

        <aside className="w-1/4 bg-[#2C2C2C] border-r p-4 overflow-y-auto rounded-l-2xl flex flex-col justify-between">
          <div>
            <h2 className="text-xl font-bold text-white mb-4">{project.title}</h2>
            <ul className="space-y-2 text-sm">
              {project.sections?.map((section, i) => (
                <li
                  key={i}
                  className={`cursor-pointer ${activeSection === i ? "text-white font-bold" : "text-gray-300 hover:text-white"}`}
                  onClick={() => scrollToSection(i)}
                >
                  {section.heading}
                </li>
              ))}
            </ul>
            <p className="text-xs font-bold text-white mb-4 mt-4">
              <span className="text-white font-semibold">Format: </span> {project.format || "IEEE 830"}
            </p>
          </div>

          <div className="flex flex-col space-y-3">
            <button onClick={handleDownloadPDF} className="py-2 px-4 bg-blue-600 text-white text-sm rounded hover:bg-blue-700">
              Download PDF
            </button>
            <button onClick={handleDelete} className="py-2 px-4 bg-red-600 text-white text-sm rounded hover:bg-red-700">
              Delete SRS
            </button>
          </div>
        </aside>

        <main className="flex-1 p-6 overflow-y-auto">
          <h1 className="text-3xl font-bold mb-6 text-gray-800">{project.title}</h1>
          {project.sections?.map((section, i) => (
            <div key={i} ref={(el) => (sectionRefs.current[i] = el)} className="mb-6">
              <h2 className="text-2xl font-semibold mb-3 text-gray-700">{section.heading}</h2>
              {section.content?.map((c, j) => (
                <div key={j} className="mb-2">
                  <h3 className="text-lg font-medium text-gray-600">{c.subheading}</h3>
                  <p className="text-gray-500">{c.text}</p>
                </div>
              ))}
            </div>
          ))}
        </main>
      </div>
    </div>
  );
}
