import React, { useState } from "react";
import ViewProject from "./ViewProject";
import jsPDF from "jspdf";

export default function HistoryCard({ project, onDelete, date }) {
    const [isOpen, setIsOpen] = useState(false);
    const createdDate = date
        ? new Date(date.slice(0, 23) + "Z")
        : null;

    const formattedDate = createdDate
        ? createdDate.toLocaleDateString(undefined, {
            year: "numeric",
            month: "long",
            day: "numeric",
        })
        : "N/A";

    const handleDownload = () => {
        const doc = new jsPDF();
        const pageHeight = doc.internal.pageSize.height;
        const pageWidth = doc.internal.pageSize.width;
        const margin = 20;
        const footerHeight = 20;
        const maxTextWidth = pageWidth - margin * 2;

        let fontSize = 50;
        doc.setFont("helvetica", "bold");

        const getWrappedLines = (text, size) => {
            doc.setFontSize(size);
            return doc.splitTextToSize(text, maxTextWidth);
        };

        let titleLines = getWrappedLines(project.title, fontSize);
        while (titleLines.length > 3 && fontSize > 20) {
            fontSize -= 2;
            titleLines = getWrappedLines(project.title, fontSize);
        }

        const lineHeight = fontSize * 1.2;
        const textHeight = titleLines.length * lineHeight;

        const startY = (pageHeight - footerHeight - textHeight) / 2;

        doc.setFontSize(fontSize);
        titleLines.forEach((line, i) => {
            doc.text(line, pageWidth / 2, startY + i * lineHeight, { align: "center" });
        });

        doc.addPage();

        let y = margin;

        project.sections.forEach((section) => {
            doc.setFontSize(16);
            doc.setFont("helvetica", "bold");
            const splitHeading = doc.splitTextToSize(section.heading, maxTextWidth);
            if (y + splitHeading.length * 7 > pageHeight - footerHeight - margin) {
                doc.addPage();
                y = margin;
            }
            doc.text(splitHeading, margin, y);
            y += splitHeading.length * 7 + 5;

            section.content.forEach(c => {
                if (c.subheading) {
                    doc.setFontSize(14);
                    doc.setFont("helvetica", "bold");
                    const splitSub = doc.splitTextToSize(c.subheading, maxTextWidth);
                    if (y + splitSub.length * 7 > pageHeight - footerHeight - margin) {
                        doc.addPage();
                        y = margin;
                    }
                    doc.text(splitSub, margin, y);
                    y += splitSub.length * 7 + 3;
                }

                doc.setFontSize(12);
                doc.setFont("helvetica", "normal");
                const splitText = doc.splitTextToSize(c.text, maxTextWidth);
                if (y + splitText.length * 7 > pageHeight - footerHeight - margin) {
                    doc.addPage();
                    y = margin;
                }
                doc.text(splitText, margin, y);
                y += splitText.length * 7 + 5;
            });

            y += 5;
        });

        const totalPages = doc.getNumberOfPages();
        for (let i = 1; i <= totalPages; i++) {
            doc.setPage(i);

            doc.setFontSize(10);
            doc.setFont("helvetica", "normal");
            const topRightText = "This SRS PDF is generated by SRSense";
            const topRightX = pageWidth - margin;
            const topRightY = margin / 2 + 2;
            doc.text(topRightText, topRightX, topRightY, { align: "right" });

            const footerY = pageHeight - footerHeight / 2;
            doc.text(project.title, margin, footerY);
            doc.text(`${i} of ${totalPages}`, pageWidth - margin, footerY, { align: "right" });
        }

        doc.save(`${project.title}.pdf`);
    };


    return (
        <>
            <div className="bg-white rounded-xl shadow-md p-5 w-72 hover:shadow-xl transition-all relative flex flex-col">
                <button
                    onClick={() => setIsOpen(true)}
                    className="absolute top-1 right-3 p-2 rounded-full hover:bg-gray-100 text-gray-600 hover:text-gray-800 transition"
                    title="View SRS"
                >
                    <svg xmlns="http://www.w3.org/2000/svg"
                        fill="none" viewBox="0 0 24 24"
                        strokeWidth={2} stroke="currentColor"
                        className="w-8 h-8">
                        <path strokeLinecap="round" strokeLinejoin="round"
                            d="M7.5 3.75H6A2.25 2.25 0 0 0 3.75 6v1.5M16.5 3.75H18A2.25 2.25 0 0 1 20.25 6v1.5m0 9V18A2.25 2.25 0 0 1 18 20.25h-1.5m-9 0H6A2.25 2.25 0 0 1 3.75 18v-1.5M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
                    </svg>
                </button>

                <h2 className="text-lg font-bold text-gray-800 mb-2 pr-8">
                    {project.title}
                </h2>

                <p className="text-sm text-gray-600 line-clamp-3 mb-3">
                    {
                        project.sections?.find(sec => sec.heading === "1. Introduction")
                            ?.content.find(item => item.subheading === "1.1 Purpose")?.text
                    }
                </p>

                <div className="bg-gray-100 rounded-lg p-3 border text-sm mb-4">
                    <p className="text-xs text-gray-500 font-semibold mb-1">âœ¨ Key Feature:</p>
                    <p className="text-gray-700">
                        {project.sections?.find(sec => sec.heading === "3. System Features")
                            ?.content[0]?.text}
                    </p>
                </div>
                <div />
                <p className="text-xs text-gray-500 mb-4">
                    Created on: {formattedDate}
                </p>

                <div className="mt-auto flex justify-between items-center border-t pt-3">
                    <button
                        onClick={onDelete}
                        className="text-red-600 hover:text-red-800 text-sm font-medium"
                        title="Delete SRS"
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none"
                            viewBox="0 0 24 24" strokeWidth={2} stroke="currentColor"
                            className="w-8 h-8">
                            <path strokeLinecap="round" strokeLinejoin="round"
                                d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 
                                1.022.166m-1.022-.165L18.16 19.673a2.25 
                                2.25 0 0 1-2.244 2.077H8.084a2.25 
                                2.25 0 0 1-2.244-2.077L4.772 
                                5.79m14.456 0a48.108 48.108 
                                0 0 0-3.478-.397m-12 
                                .562c.34-.059.68-.114 
                                1.022-.165m0 0a48.11 
                                48.11 0 0 1 3.478-.397m7.5 
                                0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 
                                51.964 0 0 0-3.32 
                                0c-1.18.037-2.09 
                                1.022-2.09 2.201v.916m7.5 0a48.667 
                                48.667 0 0 0-7.5 0" />
                        </svg>
                    </button>

                    <button
                        onClick={handleDownload}
                        className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                        title="Download SRS"
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none"
                            viewBox="0 0 24 24" strokeWidth={2} stroke="currentColor"
                            className="w-8 h-8">
                            <path strokeLinecap="round" strokeLinejoin="round"
                                d="m9 13.5 3 3m0 0 3-3m-3 
                                3v-6m1.06-4.19-2.12-2.12a1.5 
                                1.5 0 0 0-1.061-.44H4.5A2.25 
                                2.25 0 0 0 2.25 6v12a2.25 
                                2.25 0 0 0 2.25 
                                2.25h15A2.25 2.25 0 0 0 
                                21.75 18V9a2.25 2.25 0 
                                0 0-2.25-2.25h-5.379a1.5 
                                1.5 0 0 1-1.06-.44Z" />
                        </svg>
                    </button>
                </div>
            </div>

            {isOpen && (
                <ViewProject project={project} setShow={setIsOpen} />
            )}
        </>
    );
}
